@article{Rodriguez2010b,
abstract = {A graph is a data structure composed of dots (i.e. vertices) and lines (i.e. edges). The dots and lines of a graph can be organized into intricate arrangements. The ability for a graph to denote objects and their relationships to one another allow for a surprisingly large number of things to be modeled as a graph. From the dependencies that link software packages to the wood beams that provide the framing to a house, most anything has a corresponding graph representation. However, just because it is possible to represent something as a graph does not necessarily mean that its graph representation will be useful. If a modeler can leverage the plethora of tools and algorithms that store and process graphs, then such a mapping is worthwhile. This article explores the world of graphs in computing and exposes situations in which graphical models are beneficial.},
archivePrefix = {arXiv},
arxivId = {1006.2361},
author = {Rodriguez, Marko A. and Neubauer, Peter},
eprint = {1006.2361},
file = {:Users/laughedelic/Downloads/phd/1006.2361v1.pdf:pdf},
month = jun,
pages = {35--41},
title = {{Constructions from Dots and Lines}},
url = {http://arxiv.org/abs/1006.2361},
year = {2010}
}
@article{Forssell2014,
abstract = {We present a soundness theorem for a dependent type theory with context constants with respect to an indexed category of (finite, abstract) simplical complexes. The point of interest for computer science is that this category can be seen to represent tables in a natural way. Thus the category is a model for databases, a single mathematical structure in which all database schemas and instances (of a suitable, but sufficiently general form) are represented. The type theory then allows for the specification of database schemas and instances, the manipulation of the same with the usual type-theoretic operations, and the posing of queries.},
archivePrefix = {arXiv},
arxivId = {1406.6268},
author = {Forssell, Henrik and Gylterud, H\aa kon Robbestad and Spivak, David I.},
eprint = {1406.6268},
file = {:Users/laughedelic/Downloads/phd/1406.6268v3.pdf:pdf},
month = jun,
title = {{Type theoretical databases}},
url = {http://arxiv.org/abs/1406.6268},
year = {2014}
}
@article{Hartig2014,
archivePrefix = {arXiv},
arxivId = {arXiv:1409.3288v2},
author = {Hartig, Olaf},
eprint = {arXiv:1409.3288v2},
file = {:Users/laughedelic/Downloads/phd/1409.3288v2.pdf:pdf},
pages = {1--18},
title = {{Reconciliation of RDF â‹† and Property Graphs}},
year = {2014}
}
@article{Erwig2012a,
author = {Erwig, M and Walkinhgshaw, E},
file = {:Users/laughedelic/Downloads/phd/semantics-driven-dsl-design.pdf:pdf},
journal = {Formal and Practical Aspects of Domain- \ldots},
pages = {1--25},
title = {{Semantics-Driven DSL Design}},
url = {http://web.engr.orst.edu/~erwig/papers/SemanticDSLDesign-12.pdf},
year = {2012}
}
@article{Rodriguez2011a,
author = {Rodriguez, MA and Neubauer, P},
file = {:Users/laughedelic/Downloads/phd/1011.0390v1.pdf:pdf},
journal = {Data Engineering Workshops ( \ldots},
title = {{A path algebra for multi-relational graphs}},
url = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=5767613},
year = {2011}
}
@inproceedings{Fletcher2011,
archivePrefix = {arXiv},
arxivId = {arXiv:1401.8201v2},
author = {Fletcher, George H L and Gyssens, Marc and Leinders, Dirk and {Van den Bussche}, Jan and {Van Gucht}, Dirk and Vansummeren, Stijn and Wu, Yuqing},
booktitle = {Proceedings of the 14th International Conference on Database Theory - ICDT '11},
doi = {10.1145/1938551.1938578},
eprint = {arXiv:1401.8201v2},
file = {:Users/laughedelic/Downloads/phd/1401.8201v2.pdf:pdf},
isbn = {9781450305297},
issn = {00200255},
keywords = {expres-,finite variable logic,graphs,indistinguishability,relation algebra,sive power,xpath},
number = {March 2011},
pages = {197},
title = {{Relative expressive power of navigational querying on graphs}},
url = {http://portal.acm.org/citation.cfm?doid=1938551.1938578},
year = {2011}
}
@article{Rodriguez2010,
author = {Rodriguez, MA and Neubauer, P},
file = {:Users/laughedelic/Downloads/phd/1004.1001v1.pdf:pdf},
journal = {arXiv preprint arXiv:1004.1001},
title = {{The graph traversal pattern}},
url = {http://arxiv.org/abs/1004.1001},
year = {2010}
}
@article{Bowman2011,
author = {Bowman, W J and James, R P and Sabry, a},
file = {:Users/laughedelic/Downloads/phd/cat-rev.pdf:pdf},
journal = {Workshop on Reversible Computation},
title = {{Dagger Traced Symmetric Monoidal Categories and Reversible Programming}},
url = {https://www.cs.indiana.edu/~rpjames/papers/rc-slides.pdf$\backslash$npapers2://publication/uuid/295F0DD2-39BE-4235-A37C-C60C62EC659D},
year = {2011}
}
@article{Arenas2014,
abstract = {Although RDF graphs have schema information associated with them, in practice it is very common to find cases in which data do not fully conform to their schema. A prominent example of this is DBpedia, which is RDF data extracted from Wikipedia, a publicly editable source of information. In such situations, it becomes interesting to study the structural properties of the actual data, because the schema gives an incomplete description of the organization of a dataset. In this paper we have approached the study of the structuredness of an RDF graph in a principled way: we propose a framework for specifying structuredness functions, which gauge the degree to which an RDF graph conforms to a schema. In particular, we first define a formal language for specifying structuredness functions with expressions we call rules. This language allows a user or a database administrator to state a rule to which an RDF graph may fully or partially conform. Then we consider the issue of discovering a refinement of a sort (type) by partitioning the dataset into subsets whose structuredness is over a specified threshold. In particular, we prove that the natural decision problem associated to this refinement problem is NP-complete, and we provide a natural translation of this problem into Integer Linear Programming (ILP). Finally, we test this ILP solution with two real world datasets, DBpedia Persons and WordNet Nouns, and 4 different and intuitive rules, which gauge the structuredness in different ways. The rules give meaningful refinements of the datasets, showing that our language can be a powerful tool for understanding the structure of RDF data.},
archivePrefix = {arXiv},
arxivId = {1308.5703},
author = {Arenas, Marcelo and Diaz, Gonzalo I. and Fokoue, Achille and Kementsietsidis, Anastasios and Srinivas, Kavitha},
eprint = {1308.5703},
file = {:Users/laughedelic/Downloads/phd/1308.5703v2.pdf:pdf},
issn = {21508097},
journal = {Vldb},
pages = {18},
title = {{A Principled Approach to Bridging the Gap between Graph Data and their Schemas}},
url = {http://arxiv.org/abs/1308.5703},
year = {2014}
}
@article{Hellings2015,
archivePrefix = {arXiv},
arxivId = {arXiv:1502.02242v1},
author = {Hellings, Jelle},
eprint = {arXiv:1502.02242v1},
file = {:Users/laughedelic/Downloads/phd/1502.02242v1.pdf:pdf},
pages = {1--20},
title = {{Path Results for Context-free Grammar Queries on Graphs}},
year = {2015}
}
@article{Wood2012,
author = {Wood, Peter T.},
doi = {10.1145/2206869.2206879},
file = {:Users/laughedelic/Downloads/wood.pdf:pdf},
issn = {01635808},
journal = {ACM SIGMOD Record},
month = apr,
number = {1},
pages = {50},
title = {{Query languages for graph databases}},
url = {http://dl.acm.org/citation.cfm?doid=2206869.2206879},
volume = {41},
year = {2012}
}
@article{Erwig2012,
abstract = {The design of languages is still more of an art than an engineering discipline. Although recently tools have been put forward to support the language design process, such as language workbenches, these have mostly focused on a syntactic view of languages. While these tools are quite helpful for the development of parsers and editors, they provide little support for the underlying design of the languages. In this paper we illustrate how to support the design of languages by focusing on their semantics first. Specifically, we will show that powerful and general language operators can be employed to adapt and grow sophisticated languages out of simple semantics concepts. We use Haskell as a metalanguage and will associate generic language concepts, such as semantics domains, with Haskell-specific ones, such as data types. We do this in a way that clearly distinguishes our approach to language design from the traditional syntax-oriented one. This will reveal some unexpected correlations, such as viewing type classes as language multipliers. We illustrate the viability of our approach with several real-world examples.},
author = {Erwig, Martin and Walkingshaw, Eric},
doi = {10.1007/978-3-642-28830-2\_14},
file = {:Users/laughedelic/Downloads/phd/sle11-semantics-first.pdf:pdf},
isbn = {9783642288296},
issn = {03029743},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
pages = {243--262},
title = {{Semantics first! Rethinking the language design process}},
volume = {6940 LNCS},
year = {2012}
}
@article{Giles2014,
author = {Giles, Brett},
doi = {10.13140/2.1.2804.4487},
file = {:Users/laughedelic/Downloads/phd/brett-giles-phd-thesis.pdf:pdf},
month = oct,
title = {{An investigation of some theoretical aspects of reversible computing}},
url = {http://www.researchgate.net/publication/267926028\_An\_investigation\_of\_some\_theoretical\_aspects\_of\_reversible\_computing},
year = {2014}
}
